<?xml version="1.0" encoding="UTF-8"?>
<!--status 可设置 FATAL > ERROR > WARN > INFO > DEBUG > TRACE-->
<!--monitorInterval 设置指定时间（单位：秒）后重新加载log4j配置文件，至少设置5s-->
<configuration status="info" monitorInterval="30">
    <properties>
        <Property name="filePath">/tmp/yw_log/colliery</Property>
        <Property name="logPattern">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - $$- %msg -$$%xEx%n</Property>
    </properties>

    <!--先定义所有的appender, appender 是LogEvents的drivers-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息, onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--这个都知道是输出日志的格式-->
            <DesenseLayout pattern="${logPattern}"/>
        </Console>

        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingLog" fileName="${filePath}/RollingLog.log"  filePattern="${filePath}/$${date:yyyy-MM}/web-%d{MM-dd-yyyy}-%i.log">
            <PatternLayout pattern="${logPattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true"
                                           interval="1" />
            </Policies>

            <!--<Filters>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
                <PackageNameFilter package="com.sinosig" onMatch="NEUTRAL" onMismatch="DENY"/>
            </Filters>-->

            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>

    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <!--写效率：Asyn logger > Asyn appenders > 同步-->

        <!-- druid配置 -->
        <!--
        <logger name="druid.sql" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <logger name="druid.sql.ResultSet" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        -->
        <!--建立一个默认的root的logger, 同步写日志 -->
        <root level="info" includeLocation="true">
            <appender-ref ref="Console"/>
            <!--<appender-ref ref="testLog"/>
            <appender-ref ref="WholeLog"/>
            <appender-ref ref="ErrorLog"/>-->
            <appender-ref ref="RollingLog"/>
        </root>

        <!-- 异步Appenders写日志-->
        <!-- <Async name="Async" level="trace">
             <appender-ref ref="Console"/>
             <appender-ref ref="testLog"/>
             <appender-ref ref="WholeLog"/>
             <appender-ref ref="ErrorLog"/>
             <appender-ref ref="RollingLog"/>
         </Async>-->
        <logger name="com.yw.colliery" level="info" includeLocation="true">
            <appender-ref ref="RollingLog"/>
        </logger>
        <!-- 异步logger写日志,指定包路径-->
        <!--   <AsyncLogger name="com.ywserver" level="trace" includeLocation="true">
               <appender-ref ref="Console"/>
               <appender-ref ref="testLog"/>
               <appender-ref ref="WholeLog"/>
               <appender-ref ref="ErrorLog"/>
               <appender-ref ref="RollingLog"/>
           </AsyncLogger>-->

        <!-- 异步root logger写日志-->
        <!--  <asyncRoot level="trace" >
              <appender-ref ref="Console"/>
              <appender-ref ref="testLog"/>
              <appender-ref ref="WholeLog"/>
              <appender-ref ref="ErrorLog"/>
              <appender-ref ref="RollingLog"/>
          </asyncRoot>-->

    </loggers>

</configuration>